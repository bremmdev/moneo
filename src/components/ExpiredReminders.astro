---
import { db, Reminder, lte, desc } from "astro:db";
import ReminderCard from "@components/ReminderCard.astro";

type Props = {
  limit?: number;
};

const { limit } = Astro.props;

const baseQuery = db
  .select()
  .from(Reminder)
  .where(lte(Reminder.endDate, new Date()))
  .orderBy(desc(Reminder.endDate));

let reminders: Array<typeof Reminder.$inferSelect>;

if (limit) {
  reminders = await baseQuery.limit(limit);
} else {
  reminders = await baseQuery;
}
---

<section id="expired-reminders">
  <header
    class="flex justify-center flex-col lg:flex-row items-center relative"
  >
    <h2
      class="text-center text-3xl font-bold tracking-tighter text-sky-300 md:text-5xl"
    >
      Expired Reminders
    </h2>
  </header>

  {
    reminders.length === 0 && (
      <p class="text-center my-8 text-base">There are no expired reminders.</p>
    )
  }

  {
    reminders.length > 0 && (
      <ul class="flex flex-wrap gap-4 my-8 lg:my-12 text-sm text-slate-300">
        {reminders.map((r) => (
          <ReminderCard reminder={r} expired={true} />
        ))}
      </ul>
    )
  }
</section>
