---
import { type FormSchema, REMINDER_TIMES } from "@utils/validate";
import Loader from "@assets/icons/loader.svg";
import { Image } from "astro:assets";

type Props = {
  errors: Record<string, string>;
  values: FormSchema;
};

const { errors, values } = Astro.props;
---

<form
  class="flex flex-col gap-4 mx-auto max-w-2xl my-8 lg:my-12"
  hx-post="/reminder/new"
  hx-indicator=".spinner"
  hx-target="body"
  hx-push-url="true"
  hx-disabled-elt="button[type=submit]"
>
  <label for="name" class="font-bold text-slate-300">Task name</label>
  <input
    type="text"
    id="name"
    class="w-full rounded-md border border-slate-800 bg-inherit px-4 py-2 placeholder:opacity-50 focus:border-sky-300 focus:outline-none"
    name="name"
    value={values?.name}
    placeholder="Name of the task"
  />
  {
    errors?.name && (
      <span class="w-full text-center font-semibold text-rose-400">
        {errors?.name}
      </span>
    )
  }
  <label for="description" class="font-bold text-slate-300">Description</label>
  <input
    type="text"
    id="description"
    class="w-full rounded-md border border-slate-800 bg-inherit px-4 py-2 placeholder:opacity-50 focus:border-sky-300 focus:outline-none"
    name="description"
    value={values?.description}
    placeholder="Description"
  />
  {
    errors?.description && (
      <span class="w-full text-center font-semibold text-rose-400">
        {errors?.description}
      </span>
    )
  }
  <label for="expiration-time" class="font-bold text-slate-300">
    Expiration time
  </label>
  <input
    class="w-full rounded-md border border-slate-800 bg-inherit px-4 py-2 placeholder:opacity-50 focus:border-sky-300 focus:outline-none"
    type="number"
    name="expirationTime"
    id="expiration-time"
    value={values?.expirationTime}
    min="2"
    max="7200"
    step="1"
    placeholder="Task expires in (minutes, between 2 and 7200)"
  />
  {
    errors?.expirationTime && (
      <span class="w-full text-center font-semibold text-rose-400">
        {errors?.expirationTime}
      </span>
    )
  }
  <label for="reminder-time" class="font-bold text-slate-300">
    Reminder before expiration
  </label>
  <select
    name="reminderTime"
    id="reminder-time"
    class="w-full rounded-md border border-slate-800 bg-inherit px-4 py-2 placeholder:opacity-50 focus:border-sky-300 focus:outline-none text-slate-50 bg-slate-950"
  >
    {
      REMINDER_TIMES.map((time) => (
        <option
          selected={values.reminderTime === time ? "selected" : undefined}
          class="bg-slate-950"
          value={time}
        >
          {time} {time === "1" ? "minute" : "minutes"}
        </option>
      ))
    }
  </select>
  {
    errors?.reminderTime && (
      <span class="w-full text-center font-semibold text-rose-400">
        {errors?.reminderTime}
      </span>
    )
  }
  <button
    class="items-center [&>img]:hidden [&>.htmx-request]:inline-block justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-amber-300 text-slate-950 hover:bg-amber-400/90 h-10 px-4 py-2 flex gap-2 w-full md:w-fit my-4 mx-auto"
    type="submit"
    >Add Reminder<Image
      src={Loader}
      alt=""
      class="htmx-indicator spinner animate-spin w-5 h-5"
    /></button
  >
</form>
